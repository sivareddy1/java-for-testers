JAVA FUNDAMENTALS:
Class - (abstract way of representing the objects)Hierarchy header - contains methods to perform certain actions - methods can be accessed using an object of the class.;
Method - Small piece of code performing certain action - Syntax : <Access modifier> <return type> <Method name>(){} - Ex: public void writeHelloWorldToConsole(){};

Data types:
Whole numbers: Integer or int (ex:int age = 35), its a 32 bit number (limited size);
Very big whole number: Long or long (ex:long starsInGalaxy=1000000000L);
Text Values: String (ex:String name="Test");
Floating Decimal Numbers: Float or float (ex:float weight=76.53);
Precise Floating Decimal Numbers: Double or double (ex: double PI = 3.1415926);

final keyword:
final is a keyword in JAVA, if final is used to declare a variable, it means that the variable value cannot be updated further;
ex: int age = 32, this can be changed to age = 35 further, however if we declare like final int age = 35, value of age cannot be updated further;

Strings:
String is not a primitive data types, they are objects and there are lot of default methods that can be used to modify strings;
ex:legth(), toUpperCase(), replace();

Classes & Objects:
Classes
represent abstract concept - ex:Cat or Dog;
represent attributes - ex:name,favouritefood

Objects are actual things - ex: name=Felix the Cat favouritefood= Tuna , Fido the Dog

Getters & Setters : methods we use in main class to use with object;

THIS key word: this keyword is used for a variable with in a method with in a class with same variable name; ex: this.name = name;

Constructors:

Access Modifier: public, private keywords

Static key word - common variable/method shared across all objects of class, so we do not change/update static variable/method using an object, Change has to be done using class name;
final keyword: usually we make static variables as constants using final key word

Java Conventions:
ClassNames : starts with UpperCase and every other word starts with UpperCase, ex: ClassName;
methodNames: camelCase starts with lowerCase and every other word starts with UpperCase, ex: methodName;
- Make test methodNames likes this - method_names - for more readability with underscores
variableNames: camelCase starts with lowerCase and every other word starts with UpperCase, ex: variableName;
- Static variables have a different purpose than other variables so to stand out STATIC_VARIABLE is convention, ex:STATIC_VARAIABLE;
Comments:
line comment - //
multiple line comment - /* * at the start of each line --- */
java docs - /** appear in java doc comments

Inheritance:
child class extends parent;

Polymorphism:
Overriding
Abstract

Simple Conditional logic:
if(){}else{};
if(){return}elseif(){return}else{return};
Nested Conditional logic:
if(if(){return}else{return}elseif(){return}{return};

Switches & Enums
Switch: We use this to replace messy if else conditions;
Enums: We use enums rather than strings to make sure the variable names are standard;

Java Collections:
Arrays : denoted by adding VariableDataType[], max size need to be defined initially, this limitation can be mitigated by using lists;
Lists : List<DataType> VariableName = new ArrayList<>(); Max Index is not defined, its grows dynamically, List can have duplicated values for variables, this limitation can be mitigated by using Sets;
Sets : List<DataType> VariableName = new HashSet<>(); Max Index is not defined, its grows dynamically, Duplicate values are vomited, order is also ignored in Sets, prints randomly:

Loops: for Loop : for(){}

Java List API:
ArrayList is most popular;
LinkedList less used;
Regular and Mostly Used (CollectionsAPI)List methods: add, remove, index of, sublist, size, clear, add all, remove all;

Maps:
Defined with Key and Value pair;
Most common maps are HashMap and TreeMap;
Regular and Mostly Used Map methods: put, get,putAll,getOrDefault, containsKey, containsValue,replace, keySet,entrySet,remove,clear
creating maps using Map.of(), concise way of creating a map;
DefaultValues: Map returns 'NULL' if the corresponding value for a key is not present (or even if a key is not present);
ReplacingValues: Just update the value  using put method;(//replace does not change the map, unless the key is already present in the map);
Iterating over maps data (keys and values): using different methods - keySet & entrySet ;
Removing elements from Map: by using methods remove & clear;

Assertions:
jUnit Assertions; Assert.assertEquals
assertJ library assertions; Assertions.assertThat

Interfaces:
Common variables and methods defined in class (which is defined as an interface), all other classes those use these common methods implements this interface.




------------ COMPLETED JAVA FOR TESTERS MODULE -------------------